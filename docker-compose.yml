services:
  # Nginx Web Servers
  webserver1:
    image: nginx:latest
    container_name: webserver1
    volumes:
      - ./configs/webserver1.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html:ro
      - ./logs:/var/log/nginx
    networks:
      - nginx-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  webserver2:
    image: nginx:latest
    container_name: webserver2
    volumes:
      - ./configs/webserver2.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html:ro
      - ./logs:/var/log/nginx
    networks:
      - nginx-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  webserver3:
    image: nginx:latest
    container_name: webserver3
    volumes:
      - ./configs/webserver3.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html:ro
      - ./logs:/var/log/nginx
    networks:
      - nginx-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  loadbalancer:
    image: nginx:latest
    container_name: loadbalancer
    ports:
      - "8080:80"
    volumes:
      - ./configs/loadbalancer.conf:/etc/nginx/nginx.conf:ro
    networks:
      - nginx-net
    depends_on:
      - webserver1
      - webserver2
      - webserver3

  # Kafka and Zookeeper Setup
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-cluster
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-cluster
    healthcheck:
      test: kafka-topics --list --bootstrap-server localhost:9092 || exit 1
      interval: 30s
      retries: 3

  # Cassandra Database
  cassandra:
      image: cassandra:latest
      container_name: cassandra
      ports:
        - "9042:9042"
      environment:
        - CASSANDRA_CLUSTER_NAME=nginx-cluster
        - CASSANDRA_DC=nginx-datacenter  # Changed from datacenter1 to nginx-datacenter
      volumes:
        - ./cassandra-init:/docker-entrypoint-initdb.d
        - cassandra_data:/var/lib/cassandra
      healthcheck:
        test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - kafka-cluster

  # Log Forwarder (Kafka Producer)
  log-forwarder:
    build:
      context: ./log-forwarder
    container_name: log-forwarder
    volumes:
      - ./logs:/app/logs:ro
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: RAWLOG
    restart: unless-stopped
    networks:
      - kafka-cluster

  # Display Consumer (Kafka Consumer)
  display-consumer:
    build:
      context: ./display-consumer
    container_name: display-consumer
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: RAWLOG
      CASSANDRA_HOST: cassandra
    restart: unless-stopped
    networks:
      - kafka-cluster

  # Stream Processor (Real-time Processing)
  stream-processor:
    build:
      context: ./stream-processor
    container_name: stream-processor
    environment:
      WINDOW_MINUTES: 5
      TOP_N: 3
      KAFKA_BROKER: kafka:9092
      KAFKA_INPUT_TOPIC: RAWLOG
      KAFKA_OUTPUT_TOPIC: PRODUCTS
      CASSANDRA_HOST: cassandra
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - kafka-cluster
    restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "/app/setup_kafka.sh"]
    volumes:
      - ./kafka-init/setup_kafka.sh:/app/setup_kafka.sh
    networks:
      - kafka-cluster

  batch-processor:
    build:
      context: ./batch-processor
    container_name: batch-processor
    environment:
      - TOP_N=3
      - CASSANDRA_HOST=cassandra
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - kafka-cluster
    restart: unless-stopped

networks:
  nginx-net:
    driver: bridge
  kafka-cluster:
    driver: bridge

volumes:
  cassandra_data:

